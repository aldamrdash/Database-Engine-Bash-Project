#!/bin/bash
export LC_COLLATE=C
shopt -s extglob
# Constants for formatting
BOLD=$(tput bold)
NORMAL=$(tput setaf 7)
YELLOW=$(tput setaf 3)
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
CYAN=$(tput setaf 6)

# Function to print a separator line
print_separator() {
    echo "-------------------------------------------------------"
}

# Function to print a message with formatting
print_message() {
    echo "${BOLD}$1${NORMAL}"
}




#############################################################################################################################3
# Function to create a table
create_table() {
    clear

    if [ -z "$selected_db" ]; then
        print_message "${RED}Error: No database selected. Please connect to a database first.${NORMAL}"
        return
    fi

    print_message "${CYAN}Creating table in database: $selected_db${NORMAL}"

    read -p "Enter the name of the table: " tablename

    # Check the syntax of the table name
    if [[ ! $tablename =~ ^[a-zA-Z_][a-zA-Z0-9_]*$ ]]; then
        print_message "${RED}Invalid table name. It should start with a letter or underscore and can only contain letters, numbers, or underscores.${NORMAL}"
        return
    fi

    # Check if the table already exists
    while [ -f "${selected_db}/${tablename}_meta" ]; do
        print_message "${RED}Error: Table '$tablename' already exists.${NORMAL}"
        read -p "Enter a different name for the table: " tablename
    done

    # Create directory for the table if it doesn't exist
    mkdir -p "${selected_db}"

    # Create metadata file for the table
    touch "${selected_db}/${tablename}_meta"

    # Create data file for the table
    touch "${selected_db}/${tablename}_data"

    # Prompt the user for the number of columns
    while true; do
        read -p "Enter the number of columns: " num_columns

        # Check if the entered value is a positive integer
        if [[ ! $num_columns =~ ^[1-9][0-9]*$ ]]; then
            print_message "${RED}Invalid input. Please enter a positive integer for the number of columns.${NORMAL}"
        else
            break
        fi
    done

    print_separator
    print_message "${BOLD}${YELLOW}Enter column details${NORMAL}"

    # Loop through each column
    for ((i=1; i<=$num_columns; i++)); do
        read -p "Enter the name of column $i: " column_name

        # Check the syntax of the column name
        while [[ ! $column_name =~ ^[a-zA-Z_][a-zA-Z0-9_]*$ ]]; do
            print_message "${RED}Invalid column name. It should start with a letter or underscore and can only contain letters, numbers, or underscores.${NORMAL}"
            read -p "Enter a different name for column $i: " column_name
        done

        # Check if the column name already exists
        while grep -q "^${column_name}:" "${selected_db}/${tablename}_meta"; do
            print_message "${RED}Error: Column '$column_name' already exists.${NORMAL}"
            read -p "Enter a different name for column $i: " column_name
        done

        # Choose data type for the column
        while true; do
            read -p "Choose the datatype of column $column_name:
            1. int
            2. string
            Enter the number for the datatype: " datatype_choice

            case $datatype_choice in
                1)
                    column_type="int"
                    break
                    ;;
                2)
                    column_type="string"
                    break
                    ;;
                *)
                    print_message "${RED}Invalid choice. Please enter 1 for 'int' or 2 for 'string'.${NORMAL}"
                    ;;
            esac
        done

        # Store metadata in the file
        echo "${column_name}:${column_type}" >> "${selected_db}/${tablename}_meta"
    done

    print_separator
    print_message "${BOLD}${GREEN}Table '$tablename' created successfully.${NORMAL}"
    read -p "Press Enter to continue..."
}
#######################################################################################################################
select_from_table() {
    clear

    if [ -z "$selected_db" ]; then
        print_message "${RED}Error: No database selected. Please connect to a database first.${NORMAL}"
        return
    fi

    PS3="Select an option (1-4): "
    options=("Select All" "Select with Specific Value" "Select by Column" "Back to Main")
    select select_option in "${options[@]}"; do
        case $REPLY in
            1)
                # Select All
                clear
                print_message "Existing tables in the database: ${CYAN}$selected_db${NORMAL}"
                list_tables
                read -p "Enter the name of the table to select all data: " tablename

                if [ -f "${selected_db}/${tablename}_meta" ]; then
                    clear
                    print_message "Selected all data from table '${BOLD}${CYAN}$tablename${NORMAL}':"
                    cat "${selected_db}/${tablename}_data"
                else
                    print_message "${RED}Error: Table '${BOLD}${CYAN}$tablename${NORMAL}' not found in the database: ${CYAN}$selected_db${NORMAL}."
                fi
                break
                ;;
            2)
                # Select with Specific Value
                while true; do
                    clear
                    print_message "Existing tables in the database: ${CYAN}$selected_db${NORMAL}"
                    list_tables
                    read -p "Enter the name of the table to select data with specific value: " tablename

                    if [ -f "${selected_db}/${tablename}_meta" ]; then
                        # List columns in the selected table using awk
                        print_message "Columns in table '${BOLD}${CYAN}$tablename${NORMAL}':"
                        awk -F':' '{ print $1 }' "${selected_db}/${tablename}_meta"

                        # Read user input for the value of the first column
                        read -p "Enter the value to select in the first column: " value

                        # Check if the entered value exists in the first column
                        if grep -q "^${value}:" "${selected_db}/${tablename}_data"; then
                            # Display selected data from the data file
                            clear
                            print_message "Selected data from table '${BOLD}${CYAN}$tablename${NORMAL}' where the first column is '${BOLD}$value${NORMAL}':"
                            grep "^${value}:" "${selected_db}/${tablename}_data"
                            break
                        else
                            print_message "${RED}Error: Value '${BOLD}$value${NORMAL}' not found in the first column of table '${BOLD}${CYAN}$tablename${NORMAL}'. Please enter a valid value.${NORMAL}"
                            read -p "Press Enter to continue..."
                            break
                        fi
                    else
                        print_message "${RED}Error: Table '${BOLD}${CYAN}$tablename${NORMAL}' not found in the database: ${CYAN}$selected_db${NORMAL}."
                        read -p "Press Enter to continue..."
                        break
                    fi
                done
                ;;
3)
    # Select by Column
    while true; do
        clear
        print_message "Existing tables in the database: ${CYAN}$selected_db${NORMAL}"
        list_tables
        read -p "Enter the name of the table to select data by column: " tablename

        if [ -f "${selected_db}/${tablename}_meta" ]; then
            # List columns in the selected table using awk
            print_message "Columns in table '${BOLD}${CYAN}$tablename${NORMAL}':"
            awk -F':' '{ print $1 }' "${selected_db}/${tablename}_meta"

            # Read user input for the name of the column to display
            read -p "Enter the name of the column to display: " column_name

            # Check if the entered column name exists
            if awk -F':' -v col="$column_name" '{ found=0 } $1 == col { found=1; exit } END { exit !found }' "${selected_db}/${tablename}_meta"; then
                # Get the column index for the selected column
col_index=$(awk -F':' -v col="$column_name" '{ if ($1 == col) print NR; }' "${selected_db}/${tablename}_meta")

# Display selected column from the data file
clear
print_message "Selected data from table '${BOLD}${CYAN}$tablename${NORMAL}' for column '${BOLD}$column_name${NORMAL}':"

# Display the header with selected column name
echo "${BOLD}${column_name}${NORMAL}"

# Display the selected column from the data file
awk -F':' -v col_index="$col_index" '{ print $col_index }' "${selected_db}/${tablename}_data"

                break
            else
                print_message "${RED}Error: Column '${BOLD}$column_name${NORMAL}' not found in table '${BOLD}${CYAN}$tablename${NORMAL}'. Please enter a valid column name.${NORMAL}"
                read -p "Press Enter to continue..."
                break
            fi
        else
            print_message "${RED}Error: Table '${BOLD}${CYAN}$tablename${NORMAL}' not found in the database: ${CYAN}$selected_db${NORMAL}. Please enter a valid table name.${NORMAL}"
            read -p "Press Enter to continue..."
            break
        fi
    done

    read -p "Press Enter to continue..."
    ;;
            4)
                break
                ;;
            *)
                print_message "${RED}Invalid choice. Please enter a number between 1 and 3.${NORMAL}"
                ;;
        esac
    done

    read -p "Press Enter to continue..."
}

################################################################################################################
# Function to list tables in the selected database
list_tables() {
    clear

    if [ -z "$selected_db" ]; then
        print_message "${RED}Error: No database selected. Please connect to a database first.${NORMAL}"
        return
    fi

    meta_files=("${selected_db}"/*_meta)
    if [ ${#meta_files[@]} -eq 0 ]; then
        print_message "No tables found in the database: ${CYAN}$selected_db${NORMAL}"
    else
        print_message "Tables in the database: ${CYAN}$selected_db${NORMAL}"
        for metafile in "${meta_files[@]}"; do
            table_name=$(basename "${metafile}" "_meta")
            num_columns=$(wc -l <"${metafile}")
            print_message "${table_name} - ${num_columns} columns"
        done
    fi

    read -p "Press Enter to continue..."
}


################################################################################################################

drop_table() {
    clear

    while true; do
        read -p "Enter the name of the table to drop: " table_name

        meta_file="${selected_db}/${table_name}_meta"
        data_file="${selected_db}/${table_name}_data"

        if [ -f "$meta_file" ]; then
            # Check if the table name already exists
            read -p "Are you sure you want to drop table '${BOLD}${RED}$table_name${NORMAL}'? (y/n): " confirmation
            if [ "$confirmation" == "y" ]; then
                rm "$meta_file"
                print_message "Metadata file for table '${BOLD}${RED}$table_name${NORMAL}' removed successfully from the database: ${CYAN}$selected_db${NORMAL}."

                if [ -f "$data_file" ]; then
                    rm "$data_file"
                    print_message "Data file for table '${BOLD}${RED}$table_name${NORMAL}' removed successfully from the database: ${CYAN}$selected_db${NORMAL}."
                fi

                print_message "Table '${BOLD}${RED}$table_name${NORMAL}' dropped successfully from the database: ${CYAN}$selected_db${NORMAL}."
            else
                print_message "Operation aborted. Table '${BOLD}${RED}$table_name${NORMAL}' was not dropped."
            fi
            break  # Break out of the loop if a valid table name is provided
        else
            print_message "${RED}Error: Table '${BOLD}${RED}$table_name${NORMAL}' not found in the database: ${CYAN}$selected_db${NORMAL}. Please enter a valid table name."
        fi
    done

    read -p "Press Enter to continue..."
}

################################################################################################################
insert_into_table() {
    clear

    if [ -z "$selected_db" ]; then
        print_message "${RED}Error: No database selected. Please connect to a database first.${NORMAL}"
        return
    fi

    while true; do
        read -p "Enter the name of the table: " tablename

        if [ ! -f "${selected_db}/${tablename}_meta" ]; then
            print_message "${RED}Error: Table '${CYAN}$tablename${RED}' not found. Please enter a valid table name.${NORMAL}"
        else
            break  # Break out of the loop if a valid table name is provided
        fi
    done

    # Load metadata into an array for processing
    metadata=()
    while IFS=: read -r column_name column_type; do
        metadata+=("$column_name" "$column_type")
    done < "${selected_db}/${tablename}_meta"

    # Determine the number of columns
    num_columns=${#metadata[@]}

    # Initialize an array to store user input
    user_input=()

    # Loop through each column
    for ((i = 0; i < num_columns; i += 2)); do
        column_name="${metadata[i]}"
        column_type="${metadata[i + 1]}"

        while true; do
            # Prompt the user for input
            read -p "Enter value for column '${BOLD}${CYAN}$column_name${NORMAL}' (Type: ${BOLD}$column_type${NORMAL}): " value

            # Validate the input based on data type
            if [ "$column_type" == "int" ]; then
                if ! [[ "$value" =~ ^[0-9]+$ ]]; then
                    print_message "${RED}Invalid input. '${BOLD}${CYAN}$column_name${NORMAL}' should be an integer.${NORMAL}"
                    continue
                fi
            elif [ "$column_type" == "string" ]; then
                # Check if the input is empty
                if [ -z "$value" ]; then
                    print_message "${RED}Invalid input. '${BOLD}${CYAN}$column_name${NORMAL}' should not be empty for a string column.${NORMAL}"
                    continue
                fi
                # Additional validation for string inputs
                if ! [[ "$value" =~ ^[a-zA-Z]+$ ]]; then
                    print_message "${RED}Invalid input. '${BOLD}${CYAN}$column_name${NORMAL}' should contain only letters.${NORMAL}"
                    continue
                fi
            else
                print_message "${RED}Error: Unknown data type '${BOLD}$column_type${NORMAL}' for column '${BOLD}${CYAN}$column_name${NORMAL}'.${NORMAL}"
                return
            fi

            # Check if the value is not repetitive in the first column
            if [ "$i" -eq 0 ]; then
                if grep -q "^$value:" "${selected_db}/${tablename}_data"; then
                    print_message "${RED}Error: Value '$value' already exists in column '${BOLD}${CYAN}$column_name${NORMAL}'.${NORMAL}"
                    continue
                fi
            fi

            # Store the user input in the array
            user_input+=("$value")

            break  # Break out of the input loop if valid input is provided
        done
    done

    # Append the user input to the data file with colons as separators
    echo "${user_input[*]}" | tr ' ' ':' >> "${selected_db}/${tablename}_data"

    print_message "${GREEN}Data inserted successfully into table '${BOLD}${CYAN}$tablename${NORMAL}'.${NORMAL}"
    read -p "Press Enter to continue..."
}

#######################################################################################################################################
delete_from_table() {
    clear

    if [ -z "$selected_db" ]; then
        print_message "${RED}Error: No database selected. Please connect to a database first.${NORMAL}"
        return
    fi

    PS3="Select an option (1-4): "
    options=("Delete All Data" "Delete by Primary Key" "Delete by Column" "Back to Main")
    select delete_option in "${options[@]}"; do
        case $REPLY in
            1)
                # Delete All Data
                clear
                print_message "Existing tables in the database: ${CYAN}$selected_db${NORMAL}"
                list_tables
                read -p "Enter the name of the table to delete all data: " tablename

                if [ -f "${selected_db}/${tablename}_meta" ]; then
                    # Delete all data in the data file
                    > "${selected_db}/${tablename}_data"
                    print_message "All data deleted successfully from table '${BOLD}${CYAN}$tablename${NORMAL}'."
                else
                    print_message "${RED}Error: Table '${BOLD}${CYAN}$tablename${NORMAL}' not found in the database: ${CYAN}$selected_db${NORMAL}."
                fi
                break
                ;;
            2)
                # Delete by Primary Key
                while true; do
                    clear
                    print_message "Existing tables in the database: ${CYAN}$selected_db${NORMAL}"
                    list_tables
                    read -p "Enter the name of the table to delete data by primary key: " tablename

                    if [ -f "${selected_db}/${tablename}_meta" ]; then
                        # List columns in the selected table using awk
                        print_message "Columns in table '${BOLD}${CYAN}$tablename${NORMAL}':"
                        awk -F':' '{ print $1 }' "${selected_db}/${tablename}_meta"

                        # Read user input for the value of the first column to delete
                        read -p "Enter the value in the first column to delete: " value

                        # Check if the entered value exists in the first column
                        if grep -q "^${value}:" "${selected_db}/${tablename}_data"; then
                            # Delete the corresponding rows from the data file
                            sed -i "/^${value}:/d" "${selected_db}/${tablename}_data"
                            print_message "Data deleted successfully from table '${BOLD}${CYAN}$tablename${NORMAL}' where the first column is '${BOLD}$value${NORMAL}'."
                            break
                        else
                            print_message "${RED}Error: Value '${BOLD}$value${NORMAL}' not found in the first column of table '${BOLD}${CYAN}$tablename${NORMAL}'. Please enter a valid value.${NORMAL}"
                            read -p "Press Enter to continue..."
                            break
                        fi
                    else
                        print_message "${RED}Error: Table '${BOLD}${CYAN}$tablename${NORMAL}' not found in the database: ${CYAN}$selected_db${NORMAL}."
                        read -p "Press Enter to continue..."
                        break
                    fi
                done
                ;;
 3)
    # Delete by Column
    while true; do
        clear
        print_message "Existing tables in the database: ${CYAN}$selected_db${NORMAL}"
        list_tables
        read -p "Enter the name of the table to delete data by column: " tablename

        if [ -f "${selected_db}/${tablename}_meta" ]; then
            # List columns in the selected table using awk
            print_message "Columns in table '${BOLD}${CYAN}$tablename${NORMAL}':"
            awk -F':' '{ print $1 }' "${selected_db}/${tablename}_meta"

            read -p "Enter the name of the column to delete: " column_name

            # Check if the entered column name exists in the meta file
            if awk -F':' -v col="$column_name" '{ found=0 } $1 == col { found=1; exit } END { exit !found }' "${selected_db}/${tablename}_meta"; then
                # Get the index of the selected column in the meta file
                index=$(awk -F':' -v col="$column_name" '{ if ($1 == col) print NR; }' "${selected_db}/${tablename}_meta")

                # Delete the selected column from the data file in-place
                awk -F':' -v idx="$index" '{ if (NR != idx) { $idx=""; sub(/:[[:space:]]*$/, ""); } print }' "${selected_db}/${tablename}_data" > "${selected_db}/${tablename}_data.tmp" && mv "${selected_db}/${tablename}_data.tmp" "${selected_db}/${tablename}_data"

                print_message "Data deleted successfully from table '${BOLD}${CYAN}$tablename${NORMAL}' for column: ${BOLD}$column_name${NORMAL}."
                break
            else
                print_message "${RED}Error: Column '${BOLD}$column_name${NORMAL}' not found in table '${BOLD}${CYAN}$tablename${NORMAL}'. Please enter a valid column name.${NORMAL}"
            fi
        else
            print_message "${RED}Error: Table '${BOLD}${CYAN}$tablename${NORMAL}' not found in the database: ${CYAN}$selected_db${NORMAL}. Please enter a valid table name.${NORMAL}"
            break
        fi
    done
    ;;

            4)
                break
                ;;
            *)
                print_message "${RED}Invalid choice. Please enter a number between 1 and 3.${NORMAL}"
                ;;
        esac
    done

    read -p "Press Enter to continue..."
}

}
#############################################################################################################################

