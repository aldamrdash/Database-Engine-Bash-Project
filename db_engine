#!/bin/bash

# Constants for formatting
BOLD=$(tput bold)
NORMAL=$(tput setaf 7)
YELLOW=$(tput setaf 3)
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
CYAN=$(tput setaf 6)

export LC_COLLATE=C
shopt -s extglob

DB_PROJECT_DIR="db_engine_project"
selected_db=""

# Function to print a separator line
print_separator() {
    echo "-------------------------------------------------------"
}

# Function to print a message with formatting
print_message() {
    echo "${BOLD}$1${NORMAL}"
}

# Check if the main project directory exists, if not, create it
if [ ! -d "$DB_PROJECT_DIR" ]; then
    mkdir "$DB_PROJECT_DIR"
fi
cd "$DB_PROJECT_DIR" || exit

create_database() {
    clear
    print_separator
    print_message "${CYAN}Create Database${NORMAL}"
    print_separator

    read -p "Enter the name of the database: " dbname
    if [[ ! $dbname =~ ^[a-zA-Z_][a-zA-Z0-9_]*$ ]]; then
        echo "${RED}Invalid database name. It should start with a letter or underscore and can only contain letters, numbers, or underscores.${NORMAL}"
        return
    fi

    if [[ $dbname =~ [[:space:]] ]]; then
        echo "${RED}Invalid database name. It cannot contain spaces.${NORMAL}"
        return
    fi

    dbdir="${dbname}_db"

    if [ -d "$dbdir" ]; then
        echo "${RED}Error: Database '$dbname' already exists.${NORMAL}"
    else
        mkdir "$dbdir"
        echo "${GREEN}Database '$dbname' created successfully.${NORMAL}"
    fi
}

# Function to list existing databases
list_databases() {
	clear
    print_separator
    print_message "${CYAN}List Databases${NORMAL}"
    print_separator

    databases=$(ls -d *_db 2>/dev/null | sed 's/_db$//' | nl -w1 -s'. ')
    if [ -z "$databases" ]; then
        echo "${YELLOW}No databases found.${NORMAL}"
    else
        echo "${GREEN}Available databases:${NORMAL}"
        echo "$databases"
    fi
}

# Function to drop (delete) a database
drop_database() {
	clear
    print_separator
    print_message "${CYAN}Drop Database${NORMAL}"
    print_separator

    echo "${YELLOW}Existing databases:${NORMAL}"
    list_databases

    read -p "Enter the name of the database to drop: " dbname
    dbdir="${dbname}_db"

    if [ -z "$dbname" ]; then
        echo "${RED}Invalid choice. No database dropped.${NORMAL}"
    elif [ ! -d "$dbdir" ]; then
        echo "${RED}Error: Database '$dbname' not found.${NORMAL}"
    else
        rm -r "$dbdir"
        echo "${GREEN}Database '$dbname' dropped successfully.${NORMAL}"
    fi
}

# Function to connect to a database
connect_database() {
clear
    print_separator
    print_message "${CYAN}Connect to Database${NORMAL}"
    print_separator

    echo "${YELLOW}Existing databases:${NORMAL}"
    list_databases

    read -p "Enter the name of the database to connect: " dbname
    selected_db="${dbname}_db"

    if [ ! -d "$selected_db" ]; then
        echo "${RED}Error: Database '$dbname' not found.${NORMAL}"
    else
        echo "${GREEN}Connected to database '$selected_db'.${NORMAL}"
        source db_operations
        db_menu
    fi
}

db_menu() {
    while true; do
        clear
        print_separator
	print_message "${CYAN}You are Connected to ${selected_db}${NORMAL}"
        print_message "${CYAN}Database Operations Menu:${NORMAL}"
        print_separator
        echo "1. Create Table"
        echo "2. List Tables"
        echo "3. Insert into Table"
        echo "4. Select from Table"
        echo "5. Delete from Table"
        echo "6. Drop Table"
        echo "7. Back to Main Menu"

        read -p "Choose an option (1-7): " db_choice

        case $db_choice in
            1)
                create_table
                ;;
            2)
                list_tables
                ;;
            3)
                insert_into_table
                ;;
            4)
                select_from_table
                ;;
            5)
                delete_from_table
                ;;
            6)
                drop_table
                ;;
            7)
                break
                ;;
            *)
                echo "${RED}Invalid choice. Please enter a number between 1 and 7.${NORMAL}"
                read -p "Press Enter to continue..."
                ;;
        esac
    done
}

# Main menu
clear
while true; do
    print_separator
    print_message "${CYAN}Main Menu:${NORMAL}"
    print_separator
    PS3="${BOLD}Choose an option (1-5): ${NORMAL}"
    options=("Create Database" "List Databases" "Drop Database" "Connect to Database" "Quit")

    select choice in "${options[@]}"; do
        case $REPLY in
            1)
                create_database
                break
                ;;
            2)
                list_databases
                break
                ;;
            3)
                drop_database
                break
                ;;
            4)
                connect_database
                break
                ;;
            5)
                echo "${YELLOW}Exiting. Goodbye!${NORMAL}"
                exit 0
                ;;
            *)
                echo "${RED}Invalid choice. Please enter a number between 1 and 5.${NORMAL}"
                ;;
        esac
    done
done

